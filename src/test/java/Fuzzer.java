import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

//public class Fuzzer {
//
//    public static String generateRandomString(int len){ // len is the length of the random string generated by this function
//        byte[] array = new byte[len];
//        new Random().nextBytes(array);
//        String generatedString = new String(array, StandardCharsets.UTF_8);
//        return generatedString;
//    }
//
//    public static int mutateCsv(File file, int errno) throws IOException {
//
//        File fileInput = new File ("./input.csv");
//        FileWriter fileWriter = new FileWriter(fileInput);
//        fileWriter.append("Customer ID#,Account No.,Currency,Type,Balance\n");
//
//        Scanner sc = new Scanner(file);
//        int numMutations = 0;
//        int counter = 0;
//        boolean [] fallacy = {false, true};
//        while (sc.hasNext()){
//            /*
//            Purpose: we need to be able to insert the incorrect line in any part of the file. In order to ensure that the location of the incorrect
//            line is unknown, I have introduced a fasleLine variable, which indicates that the next line written into input.csv should be incorrect or not.
//            The errno variable indicates the number of false lines you want to write into input.csv.
//            Only if errno is more than 0 (indicating that we need more incorrect lines), and falseLine is true (indicating that the current line is the randomly chosen line),
//            should the line be randomized
//             */
//            if (counter<3){
//                counter++;
//                sc.next();
//            }
//            else{
//                boolean falseLine = fallacy[new Random().nextInt(2)]; // to choose true or false
//                if (falseLine == true && errno > 0){ // if you want to insert false line here, then errno must be > 0 and the falseLine must be true
//                    String lineRandom = generateRandomString(10);
//                    String line = sc.next().split(",")[0];
//                    String mutation = line+","+lineRandom;
//                    fileWriter.append(mutation);
//                    fileWriter.append("\n");
//                    errno--;
//                    numMutations++;
//                }
//                else { // otherwise
//                    String line = sc.next();
//                    fileWriter.append(line);
//                    fileWriter.append("\n");
//                }
//            }
//        }
//        sc.close();
//        fileWriter.flush();
//        fileWriter.close();
//
//        return numMutations;
//
//
//    }
//
//
//    public static void mutationFuzzer() throws Exception{
//        // code to read the given sample csv files. Both the files should have the same content.
//        String path1= "./sample_file_1.csv";
//        String path2= "./sample_file_3.csv";
//        File file1_asis = new File(path1);
//        File file2_asis = new File(path2);
//
//        ArrayList<String> file1 = CSVs.readcsv(path1);
//        ArrayList<String> file2 = CSVs.readcsv(path2);
//        File mutatedInput = new File("./input.csv");
//
//        int flag = 0;
//
//        /*
//        TODO: Change the variable "numFuzzers" below to increase the number of Fuzzed outputs
//         */
//
//        int numFuzzers = 1000;
//        int [] mutationsArray = new int[numFuzzers];
//        int [] mismatchArray = new int[numFuzzers];
//        for (int i= 0 ; i< numFuzzers; i++){
//            System.out.println("\n\nIteration "+ i);
//            int numMutations = mutateCsv(file1_asis, i);
//            int numMismatches = CSVs.countexceptions(file1, file2);
//            if (numMutations!=numMismatches){ // you could also do assert (numMutations == numMismatches) here. But I want them to run through all the iterations before giving me an output first
//                flag=1;
//            }
//            System.out.println("\nNumber of mismatches: "+ numMismatches + "\nNumber of mutations : "+ numMutations);
//        }
//        if (flag == 0){
//            System.out.println("\n\n\n\nCode runs perfectly!");
//        }
//        else{
//            System.out.println("\n\n\n\nYour code needs refinement as the fuzzer has found an error!");
//        }
//
//
//
//
//        // code to mutate entries in one of the sample csv files
//        // this should be placed in a for loop running i times
//
//
//        // run the difference checker method in main and assert if the number of incorrect entries is the same as n for all i runs of the for loop
//    }
//
//    public static void main(String[] args) throws Exception{
//        mutationFuzzer();
//    }
//}

